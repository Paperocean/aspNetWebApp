@page "/movies/create"
@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Components
@inject IDbContextFactory<BlazorApp1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Movie</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Movie" OnValidSubmit="AddMovie" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <InputText id="title" @bind-Value="Movie.Title" class="form-control" />
                <ValidationMessage For="() => Movie.Title" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="Movie.Description" class="form-control" />
                <ValidationMessage For="() => Movie.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="relasedate" class="form-label">Release Date:</label>
                <InputDate id="relasedate" @bind-Value="Movie.RelaseDate" class="form-control" />
                <ValidationMessage For="() => Movie.RelaseDate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="rate" class="form-label">Rate:</label>
                <InputNumber id="rate" @bind-Value="Movie.Rate" class="form-control" />
                <ValidationMessage For="() => Movie.Rate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="genres" class="form-label">Genres:</label>
                <div class="border p-2 rounded">
                    @foreach (var genre in AvailableGenres)
                    {
                        <div class="form-check">
                            <input class="form-check-input"
                                   type="checkbox"
                                   id="genre-@genre"
                                   checked="@IsGenreSelected(genre)"
                                   @onchange="e => ToggleGenre(genre, (bool)e.Value)" />
                            <label class="form-check-label" for="genre-@genre">@genre</label>
                        </div>
                    }
                </div>
                <small class="form-text text-muted">Select one or more genres</small>
                <!-- Debug info to verify genres are being selected -->
                <div class="mt-2">
                    <small class="text-info">Selected genres: @Movie.Genres</small>
                </div>
            </div>
            <div class="mb-3">
                <label for="imageurl" class="form-label">Image URL:</label>
                <InputText id="imageurl" @bind-Value="Movie.ImageUrl" class="form-control" />
                <ValidationMessage For="() => Movie.ImageUrl" class="text-danger" />
                @if (!string.IsNullOrEmpty(Movie.ImageUrl))
                {
                    <p>Current Image:</p>
                    <img src="@Movie.ImageUrl" alt="Current Movie Image" class="img-fluid mb-2" />
                }
            </div>
            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary">Create</button>
                <button type="button" class="btn btn-secondary" @onclick="NavigateToList">Back to List</button>
            </div>
        </EditForm>
    </div>
</div>

<div>
    <a href="/movies">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Movie Movie { get; set; } = new();

    private List<string> AvailableGenres { get; set; } = new()
    {
        "Action", "Adventure", "Animation", "Biography", "Comedy",
        "Crime", "Documentary", "Drama", "Family", "Fantasy",
        "History", "Horror", "Music", "Mystery", "Romance",
        "Sci-Fi", "Sport", "Thriller", "War", "Western"
    };

    private List<string> selectedGenres = new();

    protected override void OnInitialized()
    {
        // Initialize the genres list to empty
        Movie.Genres = string.Empty;
        selectedGenres.Clear();
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrWhiteSpace(Movie.Genres) && selectedGenres.Count == 0)
        {
            selectedGenres = Movie.Genres
                .Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(g => g.Trim())
                .ToList();
        }
    }

    private bool IsGenreSelected(string genre) => selectedGenres.Contains(genre);

    private void ToggleGenre(string genre, bool isSelected)
    {
        if (isSelected && !selectedGenres.Contains(genre))
        {
            selectedGenres.Add(genre);
        }
        else if (!isSelected)
        {
            selectedGenres.Remove(genre);
        }

        // Update the Movie.Genres property immediately
        Movie.Genres = string.Join(", ", selectedGenres);
        StateHasChanged();
    }

    private async Task AddMovie()
    {
        // Make sure genres are properly set before saving
        Movie.Genres = string.Join(", ", selectedGenres);

        using var context = DbFactory.CreateDbContext();
        context.Movie.Add(Movie);
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/movies");
    }

    private void NavigateToList() => NavigationManager.NavigateTo("/movies");
}