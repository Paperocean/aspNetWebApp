@page "/movies/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Components
@inject IDbContextFactory<BlazorApp1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Movie</h2>
    <hr />
    @if (movie is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@movie.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@movie.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Release Date</dt>
            <dd class="col-sm-10">@movie.RelaseDate.ToString("yyyy-MM-dd")</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rate</dt>
            <dd class="col-sm-10">@movie.Rate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Genres</dt>
            <dd class="col-sm-10">
                @if (string.IsNullOrWhiteSpace(movie.Genres))
                {
                    <em>No genres available</em>
                }
                else
                {
                    <div class="d-flex flex-wrap gap-1">
                        @foreach (var genre in GetGenresList(movie.Genres))
                        {
                            <span class="badge bg-primary">@genre</span>
                        }
                    </div>
                }
            </dd>
        </dl>
        <EditForm method="post" Model="movie" OnValidSubmit="DeleteMovie" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(movie is null)">Delete</button> |
            <a href="/movies">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Movie? movie;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        movie = await context.Movie.FirstOrDefaultAsync(m => m.Id == Id);

        if (movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteMovie()
    {
        using var context = DbFactory.CreateDbContext();
        context.Movie.Remove(movie!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/movies");
    }

    private List<string> GetGenresList(string genres)
    {
        if (string.IsNullOrWhiteSpace(genres))
            return new List<string>();

        // Split by comma with or without space and filter out empty entries
        return genres
            .Split(',')
            .Select(g => g.Trim())
            .Where(g => !string.IsNullOrWhiteSpace(g))
            .ToList();
    }
}